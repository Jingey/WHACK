Registers:
R1, R2, ACC
ACC not always directly accessible


NOP - 0000
    takes no operands

JMP - 0001, JEZ - 0010, JNV - 0011
    takes an address, label, or reg:
    JMP 1203
    JMP Loop
    JMP R1

STRI - 0100
    takes a destination and an address/label:
    STRI R1 230 // -> 0100_0_00001101001

STR - 0100
    takes a destination and uses the accumulator as the address
    STR R2 // -> 0100_1_111111111111111

LDR/LDRI - 0101
    the same as STR/STRI

MOV - 0110
    takes two destinations to move about
    includes the 0 register
    takes, destination then source
    MOV R1 ACC // -> 0110_10_1_0_xxxxxxx
    MOV ACC 2932 // -> 0110_01_0_literal
    MOV R2 R1 // -> 0110_11_1_10_xxxxx

LS - 0111
    takes one input
    LS L 12 // -> 0111_0_1100_xxxxxxxxx
    LS R 1 // -> 0111_1_0001_xxxxxxxx

ADD - 1000
    takes a register or a literal
    ADD R1 // -> 0110_0_0_xxxxxxx
    ADD 2031 // -> 0110_1_010101001

SUB - 1001, AND - 1010, OR - 1011
    the same as ADD

NOT - 1100
    inverts acc, takes no operands

IO - 1101
    moves a character from the input queue to a register
    or from a register to the output queue
    IO R R1 // -> 1101_0_0_xxxxxxxxx
    IO W R1 // -> 1101_1_0_xxxxxxxxx


STK - 1110
    pushes or pops values from the stack (grows down)
    STK PUSH R1 // -> 1110_0_0_xxxxxxxx
    STK POP R1 // ->1110_1_0_xxxxxxxx
